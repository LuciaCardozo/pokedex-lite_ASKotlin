/**
 * Pokedex API
 * API to provide access to the pokedex database
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.InlineResponse500
import io.swagger.client.models.Pokemon
import io.swagger.client.models.PokemonBody

import io.swagger.client.infrastructure.*

class PokemonApi(basePath: kotlin.String = "https://testing.certant.com/pokedex-api") : ApiClient(basePath) {

    /**
     * Retrieves all pokemons given a specific user
     * 
     * @param userId  
     * @return kotlin.Array<Pokemon>
     */
    @Suppress("UNCHECKED_CAST")
    fun pokemonGet(userId: String): Array<Pokemon> {
        val localVariableQuery: MultiValueMap = mapOf("userId" to listOf("$userId"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/pokemon", query = localVariableQuery
        )
        val response = request<Array<Pokemon>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Pokemon>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Creates a new pokemon in the system
     * 
     * @param body  (optional)
     * @return void
     */
    fun pokemonPost(body: PokemonBody? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pokemon"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Edits a pokemon information in the system
     * 
     * @param body  (optional)
     * @return void
     */
    fun pokemonPut(body: Pokemon? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/pokemon"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
