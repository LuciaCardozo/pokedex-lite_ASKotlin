/**
 * Pokedex API
 * API to provide access to the pokedex database
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.InlineResponse500
import io.swagger.client.models.User
import io.swagger.client.models.UserPostRequest

import io.swagger.client.infrastructure.*

class UserApi(basePath: kotlin.String = "https://testing.certant.com/pokedex-api") : ApiClient(basePath) {

    /**
     * Retrieves all users that match the criteria
     * 
     * @return kotlin.Array<User>
     */
    @Suppress("UNCHECKED_CAST")
    fun userGet(): Array<User> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user"
        )
        val response = request<Array<User>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<User>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Creates a new user
     * 
     * @param body  (optional)
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    fun userPost(body: UserPostRequest? = null): User {
        val localVariableBody: Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/user"
        )
        val response = request<User>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as User
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Retrieves a user
     * 
     * @param userId  
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    fun userUserIdGet(userId: String): User {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user/{userId}".replace("{" + "userId" + "}", "$userId")
        )
        val response = request<User>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as User
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Edits a user information
     * 
     * @param userId  
     * @param body  (optional)
     * @return void
     */
    fun userUserIdPut(userId: String, body: User? = null): Unit {
        val localVariableBody: Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/user/{userId}".replace("{" + "userId" + "}", "$userId")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
